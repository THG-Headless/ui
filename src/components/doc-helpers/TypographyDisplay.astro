---
import fs from 'node:fs';
import path from 'node:path';
import { parseTypographyScheme } from '../../utils/typographyParser';
import DesktopFontSizes from './DesktopFontSizes.astro';
import MobileFontSizes from './MobileFontSizes.astro';
import FontWeights from './FontWeights.astro';

const cssFilePath = path.resolve('./src/sample-css/typography.css');
const cssContent = fs.readFileSync(cssFilePath, 'utf-8');
const typography = parseTypographyScheme(cssContent);

interface FontSize {
  size?: string;
  lineHeight?: string;
}

function groupFontSizes(
  variables: Array<{ name: string; value: string }>
): [string, FontSize][] {
  const grouped: Record<string, FontSize> = {};
  variables.forEach((v) => {
    const baseName = v.name
      .replace('--text-', '')
      .replace('--line-height-', '')
      .replace('-desktop-', '')
      .replace('-mobile-', '');
    if (!grouped[baseName]) grouped[baseName] = {};
    if (v.name.startsWith('--text-')) grouped[baseName].size = v.value;
    if (v.name.startsWith('--line-height-'))
      grouped[baseName].lineHeight = v.value;
  });
  return Object.entries(grouped);
}

const groupedDesktopFontSizes = groupFontSizes(typography.sizes.variables);
const groupedMobileFontSizes = groupFontSizes(typography.mobileSizes.variables);
const groupedResponsiveFontSizes = groupFontSizes(
  typography.responsiveSizes.variables
);
---

<div class="max-w-7xl mx-auto p-6"></div>
