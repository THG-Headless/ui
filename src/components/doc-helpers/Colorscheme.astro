---
import '../../tailwind.css';
import fs from 'node:fs';
import path from 'node:path';
import { parseColourScheme } from '../../utils/colourParser';

const cssFilePath = path.resolve('./src/sample-css/colour.css');
const cssContent = fs.readFileSync(cssFilePath, 'utf-8');
const colours = parseColourScheme(cssContent);

// Helper function to determine if value is a CSS variable
const isVarReference = (value: string) => value.startsWith('var(');

// Helper function to resolve nested variables
const resolveNestedVar = (value: string, cssContent: string) => {
  if (!isVarReference(value)) return value;

  const varName = value.slice(4, -1);
  const varRegex = new RegExp(`${varName}:\\s*([^;]+)`);
  const match = cssContent.match(varRegex);
  return match ? match[1].trim() : value;
};

// Updated helper function to get color display value
const getColorValue = (value: string) => {
  const resolvedValue = resolveNestedVar(value, cssContent);
  if (isVarReference(resolvedValue)) {
    return resolveNestedVar(resolvedValue, cssContent);
  }
  return resolvedValue;
};

// Updated display order with semantic grouping
const categoryOrder = [
  // Base colors
  'primary',
  'secondary',
  'tertiary',
  'neutral',
  'status',
  // Semantic colors
  'semantic',
  'semanticPrimary',
  'semanticSecondary',
  'semanticTertiary',
  'textEmphasis',
  'utility',
];

// Group headers for sections
const sectionHeaders = {
  primary: 'Base Colors',
  semantic: 'Semantic Colors',
};

const isNewSection = (category: string) =>
  category === 'primary' || category === 'semantic';
---

<div class="max-w-7xl mx-auto p-6">
  <div class="space-y-12">
    {
      categoryOrder.map((categoryKey, index) => {
        const category = colours[categoryKey];
        if (!category || category.colours.length === 0) return null;

        return (
          <>
            {isNewSection(categoryKey) && (
              <h1 class="text-xl font-semibold !my-4 text-black">
                {sectionHeaders[categoryKey]}
              </h1>
            )}
            <section>
              <h2 class="text-lg font-semibold !my-4 text-black">
                {category.name}
              </h2>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                {category.colours.map((colour) => (
                  <div class="bg-white rounded-lg shadow-md border border-gray-200 overflow-hidden">
                    <div
                      class="h-24 w-full"
                      style={{ backgroundColor: getColorValue(colour.value) }}
                    />
                    <div class="p-4">
                      <button
                        class="font-mono text-xs mb-2 text-black hover:text-purple-800 cursor-copy transition-colors"
                        onclick={`navigator.clipboard.writeText('${colour.name}')`}
                      >
                        {colour.name}
                      </button>
                      <div class="text-sm text-gray-500">{colour.value}</div>
                    </div>
                  </div>
                ))}
              </div>
            </section>
          </>
        );
      })
    }
  </div>
</div>
