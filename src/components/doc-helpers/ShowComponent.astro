---
import fs from 'node:fs';
import path from 'node:path';
import type { Highlighter } from 'shiki';
import { getHighlighter } from 'shiki';

interface Props {
  filePath?: string;
}

const { filePath } = Astro.props;

declare global {
  var __shikiHighlighter: {
    promise: Promise<Highlighter> | null;
    instance: Highlighter | null;
  };
}

if (!global.__shikiHighlighter) {
  global.__shikiHighlighter = {
    promise: null,
    instance: null,
  };
}

if (import.meta.hot) {
  import.meta.hot.on('beforeUpdate', async () => {
    if (global.__shikiHighlighter.instance) {
      global.__shikiHighlighter.instance.dispose();
      global.__shikiHighlighter.instance = null;
      global.__shikiHighlighter.promise = null;
    }
  });
}

function getFileExtension(filepath: string): string {
  return filepath.split('.').pop()?.toLowerCase() || '';
}

async function getHighlighterInstance(): Promise<Highlighter> {
  if (!global.__shikiHighlighter.promise) {
    global.__shikiHighlighter.promise = getHighlighter({
      themes: ['github-dark', 'github-light'],
      langs: [
        'astro',
        'typescript',
        'javascript',
        'tsx',
        'jsx',
        'html',
        'css',
        'markdown',
        'md',
      ],
    }).then((highlighter) => {
      global.__shikiHighlighter.instance = highlighter;
      return highlighter;
    });
  }
  return global.__shikiHighlighter.promise;
}

async function getCodeContent(
  content: string,
  highlighter: Highlighter,
  language: string = 'html'
): Promise<string> {
  const darkHTML = highlighter.codeToHtml(content, {
    lang: language,
    theme: 'github-dark',
  });

  const lightHTML = highlighter.codeToHtml(content, {
    lang: 'html',
    theme: 'github-light',
  });

  return `
    <div class="dark-theme dark:block hidden">${darkHTML}</div>
    <div class="light-theme dark:hidden block">${lightHTML}</div>
  `;
}

async function getFileContent(filepath: string): Promise<string> {
  try {
    const absolutePath = path.resolve(process.cwd(), filepath);
    const content = fs.readFileSync(absolutePath, 'utf-8');
    const processedContent = content.replace(/---[\s\S]*?---/, '').trim();

    const fileExt = getFileExtension(filepath);
    const languageMap: { [key: string]: string } = {
      css: 'css',
      html: 'html',
      js: 'javascript',
      jsx: 'jsx',
      ts: 'typescript',
      tsx: 'tsx',
      astro: 'astro',
      md: 'markdown',
      mdx: 'markdown',
    };
    const language = languageMap[fileExt] || 'html';

    const highlighter = await getHighlighterInstance();
    const darkHTML = highlighter.codeToHtml(processedContent, {
      lang: language,
      theme: 'github-dark',
    });

    const lightHTML = highlighter.codeToHtml(processedContent, {
      lang: language,
      theme: 'github-light',
    });

    return `
      <div class="dark-theme dark:block hidden">${darkHTML}</div>
      <div class="light-theme dark:hidden block">${lightHTML}</div>
    `;
  } catch (error) {
    console.error(`Error reading file: ${error}`);
    return `Error: Could not read file ${filepath}`;
  }
}

const componentId = Math.random().toString(36).substr(2, 9);

const slotContent = await Astro.slots.render('default');

const previewContent = slotContent;

const htmlContent = slotContent
  .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
  .replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, '')
  .trim();

const highlighter = await getHighlighterInstance();
const codeContent = filePath
  ? await getFileContent(filePath)
  : await getCodeContent(htmlContent, highlighter, 'html');
---

<div class="not-content rounded-lg border border-zinc-700 shadow-sm">
  <div class="bg-white rounded-lg">
    <div
      class="flex justify-between items-center bg-zinc-800 rounded-t-lg border-b border-zinc-700"
    >
      <div class="flex">
        <button
          id={`previewTab-${componentId}`}
          class="relative px-4 py-2 text-sm transition-all duration-200 ease-in-out border-0 rounded-tl-md"
          style="color: #e1e4e8;"
          aria-selected="true"
          role="tab"
        >
          Preview
        </button>
        <button
          id={`codeTab-${componentId}`}
          class="relative px-4 py-2 text-sm transition-all duration-200 ease-in-out border-0"
          style="color: #e1e4e8;"
          aria-selected="false"
          role="tab"
        >
          Code
        </button>
      </div>
      <button
        id={`copyButton-${componentId}`}
        class="px-4 py-2 text-sm text-gray-400 hover:text-accent-400 flex items-center gap-1 transition-colors duration-200 cursor-pointer"
        aria-label="Copy code to clipboard"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          class="copy-icon"
          viewBox="0 0 16 16"
        >
          <path
            d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"
          ></path>
          <path
            d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"
          ></path>
        </svg>
        <span>Copy</span>
      </button>
    </div>

    <div
      id={`previewPanel-${componentId}`}
      class="bg-white !mx-4 !mt-4 !pb-4 rounded-b-lg"
      role="tabpanel"
    >
      <Fragment set:html={previewContent} />
    </div>
    <div
      id={`codePanel-${componentId}`}
      class="bg-zinc-900 p-4 hidden rounded-b-lg"
      role="tabpanel"
    >
      <div class="sl-markdown-content prose dark:prose-invert max-w-none">
        <Fragment set:html={codeContent.trim()} />
      </div>
    </div>
  </div>
</div>

<script define:vars={{ componentId }}>
  function setupTabs() {
    const previewTab = document.getElementById(`previewTab-${componentId}`);
    const codeTab = document.getElementById(`codeTab-${componentId}`);
    const previewPanel = document.getElementById(`previewPanel-${componentId}`);
    const codePanel = document.getElementById(`codePanel-${componentId}`);

    if (!previewTab || !codeTab || !previewPanel || !codePanel) return;

    const switchTab = (selectedTab, otherTab, selectedPanel, otherPanel) => {
      selectedTab.setAttribute('aria-selected', 'true');
      selectedTab.classList.add(
        'border-accent-500',
        'text-accent-500',
        'font-bold',
        'border-b-2'
      );
      selectedTab.classList.remove(
        'text-gray-400',
        'border-transparent',
        'font-normal'
      );

      otherTab.setAttribute('aria-selected', 'false');
      otherTab.classList.remove(
        'border-accent-500',
        'text-accent-500',
        'font-bold',
        'border-b-2'
      );
      otherTab.classList.add(
        'text-gray-400',
        'border-transparent',
        'font-normal'
      );

      selectedPanel.classList.remove('hidden');
      otherPanel.classList.add('hidden');
    };

    switchTab(previewTab, codeTab, previewPanel, codePanel);

    previewTab.addEventListener('click', () => {
      switchTab(previewTab, codeTab, previewPanel, codePanel);
    });

    codeTab.addEventListener('click', () => {
      switchTab(codeTab, previewTab, codePanel, previewPanel);
    });
  }

  function setupCopyButton() {
    const copyButton = document.getElementById(`copyButton-${componentId}`);
    if (!copyButton || copyButton.dataset.initialized) return;

    copyButton.dataset.initialized = 'true';

    copyButton.addEventListener('click', async () => {
      const codePanel = document.getElementById(`codePanel-${componentId}`);
      if (!codePanel) return;

      try {
        const preElement = codePanel.querySelector('pre');
        const codeText = preElement ? preElement.textContent : '';

        await navigator.clipboard.writeText(codeText);

        const originalContent = copyButton.innerHTML;
        copyButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="check-icon" viewBox="0 0 16 16">
          <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
        </svg>
        <span>Copied!</span>
      `;
        copyButton.classList.add('text-green-500', 'dark:text-green-400');

        setTimeout(() => {
          copyButton.innerHTML = originalContent;
          copyButton.classList.remove('text-green-500', 'dark:text-green-400');
        }, 2000);
      } catch (err) {
        console.error('Failed to copy text: ', err);
      }
    });
  }

  setupTabs();
  setupCopyButton();
</script>

<style is:global>
  .dark-theme pre {
    background-color: transparent !important;
    padding: 0 !important;
  }

  .dark-theme code {
    white-space: pre-wrap !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
  }

  /* Force dark theme styles */
  .dark-theme {
    --shiki-color-text: #e1e4e8 !important;
    --shiki-color-background: transparent !important;
    --shiki-token-constant: #79b8ff !important;
    --shiki-token-string: #9ecbff !important;
    --shiki-token-comment: #6a737d !important;
    --shiki-token-keyword: #f97583 !important;
    --shiki-token-parameter: #e1e4e8 !important;
    --shiki-token-function: #b392f0 !important;
    --shiki-token-string-expression: #85e89d !important;
    --shiki-token-punctuation: #e1e4e8 !important;
    --shiki-token-link: #79b8ff !important;
  }

  pre {
    margin: 0 !important;
  }

  code {
    font-size: 0.9em !important;
    line-height: 1.5 !important;
    color: var(--shiki-color-text) !important;
  }

  .tab-button:focus-visible {
    border-radius: 4px;
  }

  /* Override any theme-based colors in the component */
  [id^='copyButton-'] {
    color: #9ca3af !important; /* text-gray-400 */
  }

  [id^='copyButton-']:hover {
    color: var(--accent-400) !important;
  }

  [id^='previewTab-'][aria-selected='true'],
  [id^='codeTab-'][aria-selected='true'] {
    color: #ffffff !important;
    font-weight: bold !important;
  }

  [id^='previewTab-'][aria-selected='false'],
  [id^='codeTab-'][aria-selected='false'] {
    color: #9ca3af !important; /* text-gray-400 */
  }
</style>
