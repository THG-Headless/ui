---
import fs from "node:fs";
import path from "node:path";
import type { Highlighter } from "shiki";
import { getHighlighter } from "shiki";
import "../tailwind.css";

interface Props {
  filePath: string;
}

const { filePath } = Astro.props;

declare global {
  var __shikiHighlighter: {
    promise: Promise<Highlighter> | null;
    instance: Highlighter | null;
  };
}

if (!global.__shikiHighlighter) {
  global.__shikiHighlighter = {
    promise: null,
    instance: null,
  };
}

if (import.meta.hot) {
  import.meta.hot.on("beforeUpdate", async () => {
    if (global.__shikiHighlighter.instance) {
      global.__shikiHighlighter.instance.dispose();
      global.__shikiHighlighter.instance = null;
      global.__shikiHighlighter.promise = null;
    }
  });
}

async function getHighlighterInstance(): Promise<Highlighter> {
  if (!global.__shikiHighlighter.promise) {
    global.__shikiHighlighter.promise = getHighlighter({
      themes: ["github-dark", "github-light"],
      langs: [
        "astro",
        "typescript",
        "javascript",
        "tsx",
        "jsx",
        "html",
        "css",
        "markdown",
        "md",
      ],
    }).then((highlighter) => {
      global.__shikiHighlighter.instance = highlighter;
      return highlighter;
    });
  }
  return global.__shikiHighlighter.promise;
}

async function getFileContent(filepath: string): Promise<string> {
  try {
    const absolutePath = path.resolve(process.cwd(), filepath);
    const content = fs.readFileSync(absolutePath, "utf-8");
    const processedContent = content.replace(/---[\s\S]*?---/, "").trim();

    const highlighter = await getHighlighterInstance();

    const darkHTML = highlighter.codeToHtml(processedContent, {
      lang: "astro",
      theme: "github-dark",
    });

    const lightHTML = highlighter.codeToHtml(processedContent, {
      lang: "astro",
      theme: "github-light",
    });

    return `
      <div class="dark-theme dark:block hidden">${darkHTML}</div>
      <div class="light-theme dark:hidden block">${lightHTML}</div>
    `;
  } catch (error) {
    console.error(`Error reading file: ${error}`);
    return `Error: Could not read file ${filepath}`;
  }
}

const componentId = Math.random().toString(36).substr(2, 9);
const codeContent = await getFileContent(filePath);
---

<div
  class="not-content rounded-lg border border-zinc-200 dark:border-zinc-700 bg-zinc-100 dark:bg-zinc-900 shadow-sm transition-colors duration-200"
>
  <div class="border-b border-gray-200 dark:border-gray-700">
    <div class="flex justify-between items-center">
      <div class="flex">
        <button
          id={`previewTab-${componentId}`}
          class="relative px-4 py-2 text-sm transition-all duration-200 ease-in-out border-0 rounded-tl-md hover:bg-zinc-50 dark:hover:bg-zinc-800"
          aria-selected="true"
          role="tab"
        >
          Preview
        </button>
        <button
          id={`codeTab-${componentId}`}
          class="relative px-4 py-2 text-sm transition-all duration-200 ease-in-out border-0 hover:bg-zinc-50 dark:hover:bg-zinc-800"
          aria-selected="false"
          role="tab"
        >
          HTML
        </button>
      </div>
      <button
        id={`copyButton-${componentId}`}
        class="px-4 py-2 text-sm text-gray-500 dark:text-gray-400 hover:text-accent-500 dark:hover:text-accent-400 flex items-center gap-1 transition-colors duration-200 cursor-pointer"
        aria-label="Copy code to clipboard"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          class="copy-icon"
          viewBox="0 0 16 16"
        >
          <path
            d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"
          ></path>
          <path
            d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"
          ></path>
        </svg>
        <span>Copy</span>
      </button>
    </div>

    <div class="p-4">
      <div id={`previewPanel-${componentId}`} class="tab-panel" role="tabpanel">
        <slot />
      </div>
      <div
        id={`codePanel-${componentId}`}
        class="tab-panel hidden"
        role="tabpanel"
      >
        <div class="sl-markdown-content prose dark:prose-invert max-w-none">
          <Fragment set:html={codeContent.trim()} />
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ componentId }}>
    function setupTabs() {
      const previewTab = document.getElementById(`previewTab-${componentId}`);
      const codeTab = document.getElementById(`codeTab-${componentId}`);
      const previewPanel = document.getElementById(
        `previewPanel-${componentId}`
      );
      const codePanel = document.getElementById(`codePanel-${componentId}`);

      if (!previewTab || !codeTab || !previewPanel || !codePanel) return;

      const switchTab = (selectedTab, otherTab, selectedPanel, otherPanel) => {
        selectedTab.setAttribute("aria-selected", "true");
        selectedTab.classList.add(
          "border-accent-500",
          "text-accent-500",
          "font-bold",
          "bg-white/5",
          "hover:bg-white/10",
          "border-b-2"
        );
        selectedTab.classList.remove(
          "text-gray-500",
          "dark:text-gray-400",
          "border-transparent",
          "font-normal",
          "hover:bg-zinc-50",
          "dark:hover:bg-zinc-800"
        );

        otherTab.setAttribute("aria-selected", "false");
        otherTab.classList.remove(
          "border-accent-500",
          "text-accent-500",
          "font-bold",
          "bg-white/5",
          "border-b-2"
        );
        otherTab.classList.add(
          "text-gray-500",
          "dark:text-gray-400",
          "border-transparent",
          "font-normal",
          "hover:bg-zinc-50",
          "dark:hover:bg-zinc-800"
        );

        selectedPanel.classList.remove("hidden");
        otherPanel.classList.add("hidden");
      };

      switchTab(previewTab, codeTab, previewPanel, codePanel);

      previewTab.addEventListener("click", () => {
        switchTab(previewTab, codeTab, previewPanel, codePanel);
      });

      codeTab.addEventListener("click", () => {
        switchTab(codeTab, previewTab, codePanel, previewPanel);
      });
    }

    function setupCopyButton() {
      const copyButton = document.getElementById(`copyButton-${componentId}`);
      if (!copyButton || copyButton.dataset.initialized) return;

      copyButton.dataset.initialized = "true";

      copyButton.addEventListener("click", async () => {
        const codePanel = document.getElementById(`codePanel-${componentId}`);
        if (!codePanel) return;

        try {
          const preElement = codePanel.querySelector("pre");
          const codeText = preElement ? preElement.textContent : "";

          await navigator.clipboard.writeText(codeText);

          const originalContent = copyButton.innerHTML;
          copyButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="check-icon" viewBox="0 0 16 16">
          <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
        </svg>
        <span>Copied!</span>
      `;
          copyButton.classList.add("text-green-500", "dark:text-green-400");

          setTimeout(() => {
            copyButton.innerHTML = originalContent;
            copyButton.classList.remove(
              "text-green-500",
              "dark:text-green-400"
            );
          }, 2000);
        } catch (err) {
          console.error("Failed to copy text: ", err);
        }
      });
    }

    setupTabs();
    setupCopyButton();
  </script>
</div>

<style is:global>
  .dark-theme pre,
  .light-theme pre {
    background-color: transparent !important;
    padding: 0 !important;
  }

  .dark-theme code,
  .light-theme code {
    white-space: pre-wrap !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
  }

  pre {
    margin: 0 !important;
  }

  code {
    font-size: 0.9em !important;
    line-height: 1.5 !important;
  }

  .tab-button:focus-visible {
    border-radius: 4px;
  }
</style>
